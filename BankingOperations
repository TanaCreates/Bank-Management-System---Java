//Accounts class
interface BankingOperations<T extends BankAccount>{
    void checkBalance();
    void deposit(double amount);
    void withdraw(double amount) throws InsufficientFundsException, InvalidTransactionException;
    void transferFunds(BankAccount destination, double amount) throws InsufficientFundsException, InvalidTransactionException;
}

class BankAccount implements BankingOperations<BankAccount> {
    private String accountNumber;
    protected double balance;

    public BankAccount(String accountNumber, double initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    @Override
    public void checkBalance() {
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Current Balance: R" + balance);
    }

    @Override
    public void deposit(double amount) {
        if (amount <= 0) {
            System.out.println("Invalid amount for deposit.");
            return;
        }
        balance += amount;
        System.out.println("Deposited: R" + amount);
        System.out.println("Current Balance: R" + balance);
    }

    @Override
    public void withdraw(double amount) throws InsufficientFundsException, InvalidTransactionException {
        if (amount <= 0) {
            throw new InvalidTransactionException("Invalid amount for withdrawal.");
        }
        if (amount > balance) {
            throw new InsufficientFundsException("Insufficient funds.");
        }
        balance -= amount;
        System.out.println("Withdrawn: R" + amount);
        System.out.println("Current Balance: R" + balance);
    }

    @Override
    public void transferFunds(BankAccount destination, double amount) throws InsufficientFundsException, InvalidTransactionException {
        if (amount <= 0) {
            throw new InvalidTransactionException("Invalid amount for transfer.");
        }
        if (amount > balance) {
            throw new InsufficientFundsException("Insufficient funds for transfer.");
        }
        balance -= amount;
        destination.deposit(amount);
        System.out.println("Transferred: R" + amount + " to Account " + destination.getAccountNumber());
        System.out.println("Current Balance: R" + balance);
    }
}

class SavingsAccount extends BankAccount {
    private double interestRate;

    public SavingsAccount(String accountNumber, double initialBalance, double interestRate) {
        super(accountNumber, initialBalance);
        this.interestRate = interestRate;
    }

    public void addInterest() {
        double interest = balance * interestRate / 100;
        balance += interest;
        System.out.println("Interest Added: R" + interest);
        System.out.println("Current Balance: R" + balance);
    }
}

class CheckingAccount extends BankAccount {
    private double overdraftLimit;

    public CheckingAccount(String accountNumber, double initialBalance, double overdraftLimit) {
        super(accountNumber, initialBalance);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public void withdraw(double amount) throws InsufficientFundsException, InvalidTransactionException {
        if (amount <= 0) {
            throw new InvalidTransactionException("Invalid amount for withdrawal.");
        }
        if (amount > balance + overdraftLimit) {
            throw new InsufficientFundsException("Exceeds overdraft limit.");
        }
        balance -= amount;
        System.out.println("Withdrawn: R" + amount);
        System.out.println("Current Balance: R" + balance);
    }
}

class InsufficientFundsException extends Exception {
    public InsufficientFundsException(String message) {
        super(message);
    }
}

class InvalidTransactionException extends Exception {
    public InvalidTransactionException(String message) {
        super(message);
    }
}
